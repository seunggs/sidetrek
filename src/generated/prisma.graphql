# source: http://localhost:4466/default/dev
# timestamp: Mon Mar 18 2019 18:13:21 GMT-0700 (Pacific Daylight Time)

type AggregateComment {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateMail {
  count: Int!
}

type AggregateMember {
  count: Int!
}

type AggregateMilestone {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateReaction {
  count: Int!
}

type AggregateSubscriber {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Comment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  reactions(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction!]
  body: String!
  post: Post
  parentComment: Comment
  childComments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  body: String!
  author: UserCreateOneWithoutCommentsInput!
  reactions: ReactionCreateManyWithoutCommentInput
  post: PostCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutChildCommentsInput
  childComments: CommentCreateManyWithoutParentCommentInput
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutParentCommentInput {
  create: [CommentCreateWithoutParentCommentInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutChildCommentsInput {
  create: CommentCreateWithoutChildCommentsInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutReactionsInput {
  create: CommentCreateWithoutReactionsInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutAuthorInput {
  body: String!
  reactions: ReactionCreateManyWithoutCommentInput
  post: PostCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutChildCommentsInput
  childComments: CommentCreateManyWithoutParentCommentInput
}

input CommentCreateWithoutChildCommentsInput {
  body: String!
  author: UserCreateOneWithoutCommentsInput!
  reactions: ReactionCreateManyWithoutCommentInput
  post: PostCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutChildCommentsInput
}

input CommentCreateWithoutParentCommentInput {
  body: String!
  author: UserCreateOneWithoutCommentsInput!
  reactions: ReactionCreateManyWithoutCommentInput
  post: PostCreateOneWithoutCommentsInput
  childComments: CommentCreateManyWithoutParentCommentInput
}

input CommentCreateWithoutPostInput {
  body: String!
  author: UserCreateOneWithoutCommentsInput!
  reactions: ReactionCreateManyWithoutCommentInput
  parentComment: CommentCreateOneWithoutChildCommentsInput
  childComments: CommentCreateManyWithoutParentCommentInput
}

input CommentCreateWithoutReactionsInput {
  body: String!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput
  parentComment: CommentCreateOneWithoutChildCommentsInput
  childComments: CommentCreateManyWithoutParentCommentInput
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  body_ASC
  body_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  body: String!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  body: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  reactions: ReactionUpdateManyWithoutCommentInput
  post: PostUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutChildCommentsInput
  childComments: CommentUpdateManyWithoutParentCommentInput
}

input CommentUpdateManyDataInput {
  body: String
}

input CommentUpdateManyMutationInput {
  body: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutParentCommentInput {
  create: [CommentCreateWithoutParentCommentInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentCommentInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentCommentInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneWithoutChildCommentsInput {
  create: CommentCreateWithoutChildCommentsInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CommentUpdateWithoutChildCommentsDataInput
  upsert: CommentUpsertWithoutChildCommentsInput
}

input CommentUpdateOneWithoutReactionsInput {
  create: CommentCreateWithoutReactionsInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CommentUpdateWithoutReactionsDataInput
  upsert: CommentUpsertWithoutReactionsInput
}

input CommentUpdateWithoutAuthorDataInput {
  body: String
  reactions: ReactionUpdateManyWithoutCommentInput
  post: PostUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutChildCommentsInput
  childComments: CommentUpdateManyWithoutParentCommentInput
}

input CommentUpdateWithoutChildCommentsDataInput {
  body: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  reactions: ReactionUpdateManyWithoutCommentInput
  post: PostUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutChildCommentsInput
}

input CommentUpdateWithoutParentCommentDataInput {
  body: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  reactions: ReactionUpdateManyWithoutCommentInput
  post: PostUpdateOneWithoutCommentsInput
  childComments: CommentUpdateManyWithoutParentCommentInput
}

input CommentUpdateWithoutPostDataInput {
  body: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  reactions: ReactionUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutChildCommentsInput
  childComments: CommentUpdateManyWithoutParentCommentInput
}

input CommentUpdateWithoutReactionsDataInput {
  body: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  parentComment: CommentUpdateOneWithoutChildCommentsInput
  childComments: CommentUpdateManyWithoutParentCommentInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutParentCommentInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutParentCommentDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithoutChildCommentsInput {
  update: CommentUpdateWithoutChildCommentsDataInput!
  create: CommentCreateWithoutChildCommentsInput!
}

input CommentUpsertWithoutReactionsInput {
  update: CommentUpdateWithoutReactionsDataInput!
  create: CommentCreateWithoutReactionsInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutParentCommentInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutParentCommentDataInput!
  create: CommentCreateWithoutParentCommentInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  author: UserWhereInput
  reactions_every: ReactionWhereInput
  reactions_some: ReactionWhereInput
  reactions_none: ReactionWhereInput
  post: PostWhereInput
  parentComment: CommentWhereInput
  childComments_every: CommentWhereInput
  childComments_some: CommentWhereInput
  childComments_none: CommentWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type File implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
  project: Project
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
  project: ProjectCreateOneWithoutFilesInput
}

input FileCreateManyWithoutProjectInput {
  create: [FileCreateWithoutProjectInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutProjectInput {
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

input FileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
  project: ProjectUpdateOneWithoutFilesInput
}

input FileUpdateManyDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyMutationInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyWithoutProjectInput {
  create: [FileCreateWithoutProjectInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
  deleteMany: [FileScalarWhereInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutProjectInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutProjectDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateWithWhereUniqueWithoutProjectInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutProjectDataInput!
}

input FileUpsertWithWhereUniqueWithoutProjectInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutProjectDataInput!
  create: FileCreateWithoutProjectInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  project: ProjectWhereInput
}

input FileWhereUniqueInput {
  id: ID
  url: String
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mail implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  to: [String!]!
  from: String!
  subject: String
  text: String
  html: String
  isMultiple: Boolean
  cc: [String!]!
  bcc: [String!]!
  replyTo: String
}

"""A connection to a list of items."""
type MailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MailEdge]!
  aggregate: AggregateMail!
}

input MailCreatebccInput {
  set: [String!]
}

input MailCreateccInput {
  set: [String!]
}

input MailCreateInput {
  from: String!
  subject: String
  text: String
  html: String
  isMultiple: Boolean
  replyTo: String
  to: MailCreatetoInput
  cc: MailCreateccInput
  bcc: MailCreatebccInput
}

input MailCreatetoInput {
  set: [String!]
}

"""An edge in a connection."""
type MailEdge {
  """The item at the end of the edge."""
  node: Mail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MailOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  from_ASC
  from_DESC
  subject_ASC
  subject_DESC
  text_ASC
  text_DESC
  html_ASC
  html_DESC
  isMultiple_ASC
  isMultiple_DESC
  replyTo_ASC
  replyTo_DESC
}

type MailPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  to: [String!]!
  from: String!
  subject: String
  text: String
  html: String
  isMultiple: Boolean
  cc: [String!]!
  bcc: [String!]!
  replyTo: String
}

type MailSubscriptionPayload {
  mutation: MutationType!
  node: Mail
  updatedFields: [String!]
  previousValues: MailPreviousValues
}

input MailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MailWhereInput
}

input MailUpdatebccInput {
  set: [String!]
}

input MailUpdateccInput {
  set: [String!]
}

input MailUpdateInput {
  from: String
  subject: String
  text: String
  html: String
  isMultiple: Boolean
  replyTo: String
  to: MailUpdatetoInput
  cc: MailUpdateccInput
  bcc: MailUpdatebccInput
}

input MailUpdateManyMutationInput {
  from: String
  subject: String
  text: String
  html: String
  isMultiple: Boolean
  replyTo: String
  to: MailUpdatetoInput
  cc: MailUpdateccInput
  bcc: MailUpdatebccInput
}

input MailUpdatetoInput {
  set: [String!]
}

input MailWhereInput {
  """Logical AND on all given filters."""
  AND: [MailWhereInput!]

  """Logical OR on all given filters."""
  OR: [MailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  from: String

  """All values that are not equal to given value."""
  from_not: String

  """All values that are contained in given list."""
  from_in: [String!]

  """All values that are not contained in given list."""
  from_not_in: [String!]

  """All values less than the given value."""
  from_lt: String

  """All values less than or equal the given value."""
  from_lte: String

  """All values greater than the given value."""
  from_gt: String

  """All values greater than or equal the given value."""
  from_gte: String

  """All values containing the given string."""
  from_contains: String

  """All values not containing the given string."""
  from_not_contains: String

  """All values starting with the given string."""
  from_starts_with: String

  """All values not starting with the given string."""
  from_not_starts_with: String

  """All values ending with the given string."""
  from_ends_with: String

  """All values not ending with the given string."""
  from_not_ends_with: String
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  html: String

  """All values that are not equal to given value."""
  html_not: String

  """All values that are contained in given list."""
  html_in: [String!]

  """All values that are not contained in given list."""
  html_not_in: [String!]

  """All values less than the given value."""
  html_lt: String

  """All values less than or equal the given value."""
  html_lte: String

  """All values greater than the given value."""
  html_gt: String

  """All values greater than or equal the given value."""
  html_gte: String

  """All values containing the given string."""
  html_contains: String

  """All values not containing the given string."""
  html_not_contains: String

  """All values starting with the given string."""
  html_starts_with: String

  """All values not starting with the given string."""
  html_not_starts_with: String

  """All values ending with the given string."""
  html_ends_with: String

  """All values not ending with the given string."""
  html_not_ends_with: String
  isMultiple: Boolean

  """All values that are not equal to given value."""
  isMultiple_not: Boolean
  replyTo: String

  """All values that are not equal to given value."""
  replyTo_not: String

  """All values that are contained in given list."""
  replyTo_in: [String!]

  """All values that are not contained in given list."""
  replyTo_not_in: [String!]

  """All values less than the given value."""
  replyTo_lt: String

  """All values less than or equal the given value."""
  replyTo_lte: String

  """All values greater than the given value."""
  replyTo_gt: String

  """All values greater than or equal the given value."""
  replyTo_gte: String

  """All values containing the given string."""
  replyTo_contains: String

  """All values not containing the given string."""
  replyTo_not_contains: String

  """All values starting with the given string."""
  replyTo_starts_with: String

  """All values not starting with the given string."""
  replyTo_not_starts_with: String

  """All values ending with the given string."""
  replyTo_ends_with: String

  """All values not ending with the given string."""
  replyTo_not_ends_with: String
}

input MailWhereUniqueInput {
  id: ID
}

type Member implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  role: MemberRole!
  project: Project!
  milestones(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Milestone!]
}

"""A connection to a list of items."""
type MemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MemberEdge]!
  aggregate: AggregateMember!
}

input MemberCreateInput {
  role: MemberRole
  user: UserCreateOneWithoutMembersInput!
  project: ProjectCreateOneWithoutMembersInput!
  milestones: MilestoneCreateManyWithoutMemberInput
}

input MemberCreateManyWithoutProjectInput {
  create: [MemberCreateWithoutProjectInput!]
  connect: [MemberWhereUniqueInput!]
}

input MemberCreateManyWithoutUserInput {
  create: [MemberCreateWithoutUserInput!]
  connect: [MemberWhereUniqueInput!]
}

input MemberCreateOneWithoutMilestonesInput {
  create: MemberCreateWithoutMilestonesInput
  connect: MemberWhereUniqueInput
}

input MemberCreateWithoutMilestonesInput {
  role: MemberRole
  user: UserCreateOneWithoutMembersInput!
  project: ProjectCreateOneWithoutMembersInput!
}

input MemberCreateWithoutProjectInput {
  role: MemberRole
  user: UserCreateOneWithoutMembersInput!
  milestones: MilestoneCreateManyWithoutMemberInput
}

input MemberCreateWithoutUserInput {
  role: MemberRole
  project: ProjectCreateOneWithoutMembersInput!
  milestones: MilestoneCreateManyWithoutMemberInput
}

"""An edge in a connection."""
type MemberEdge {
  """The item at the end of the edge."""
  node: Member!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MemberOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
}

type MemberPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: MemberRole!
}

enum MemberRole {
  ROOT
  ADMIN
  MODERATOR
  USER
}

input MemberScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  role: MemberRole

  """All values that are not equal to given value."""
  role_not: MemberRole

  """All values that are contained in given list."""
  role_in: [MemberRole!]

  """All values that are not contained in given list."""
  role_not_in: [MemberRole!]
}

type MemberSubscriptionPayload {
  mutation: MutationType!
  node: Member
  updatedFields: [String!]
  previousValues: MemberPreviousValues
}

input MemberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MemberWhereInput
}

input MemberUpdateInput {
  role: MemberRole
  user: UserUpdateOneRequiredWithoutMembersInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
  milestones: MilestoneUpdateManyWithoutMemberInput
}

input MemberUpdateManyDataInput {
  role: MemberRole
}

input MemberUpdateManyMutationInput {
  role: MemberRole
}

input MemberUpdateManyWithoutProjectInput {
  create: [MemberCreateWithoutProjectInput!]
  connect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  disconnect: [MemberWhereUniqueInput!]
  delete: [MemberWhereUniqueInput!]
  update: [MemberUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [MemberUpdateManyWithWhereNestedInput!]
  deleteMany: [MemberScalarWhereInput!]
  upsert: [MemberUpsertWithWhereUniqueWithoutProjectInput!]
}

input MemberUpdateManyWithoutUserInput {
  create: [MemberCreateWithoutUserInput!]
  connect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  disconnect: [MemberWhereUniqueInput!]
  delete: [MemberWhereUniqueInput!]
  update: [MemberUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MemberUpdateManyWithWhereNestedInput!]
  deleteMany: [MemberScalarWhereInput!]
  upsert: [MemberUpsertWithWhereUniqueWithoutUserInput!]
}

input MemberUpdateManyWithWhereNestedInput {
  where: MemberScalarWhereInput!
  data: MemberUpdateManyDataInput!
}

input MemberUpdateOneRequiredWithoutMilestonesInput {
  create: MemberCreateWithoutMilestonesInput
  connect: MemberWhereUniqueInput
  update: MemberUpdateWithoutMilestonesDataInput
  upsert: MemberUpsertWithoutMilestonesInput
}

input MemberUpdateWithoutMilestonesDataInput {
  role: MemberRole
  user: UserUpdateOneRequiredWithoutMembersInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
}

input MemberUpdateWithoutProjectDataInput {
  role: MemberRole
  user: UserUpdateOneRequiredWithoutMembersInput
  milestones: MilestoneUpdateManyWithoutMemberInput
}

input MemberUpdateWithoutUserDataInput {
  role: MemberRole
  project: ProjectUpdateOneRequiredWithoutMembersInput
  milestones: MilestoneUpdateManyWithoutMemberInput
}

input MemberUpdateWithWhereUniqueWithoutProjectInput {
  where: MemberWhereUniqueInput!
  data: MemberUpdateWithoutProjectDataInput!
}

input MemberUpdateWithWhereUniqueWithoutUserInput {
  where: MemberWhereUniqueInput!
  data: MemberUpdateWithoutUserDataInput!
}

input MemberUpsertWithoutMilestonesInput {
  update: MemberUpdateWithoutMilestonesDataInput!
  create: MemberCreateWithoutMilestonesInput!
}

input MemberUpsertWithWhereUniqueWithoutProjectInput {
  where: MemberWhereUniqueInput!
  update: MemberUpdateWithoutProjectDataInput!
  create: MemberCreateWithoutProjectInput!
}

input MemberUpsertWithWhereUniqueWithoutUserInput {
  where: MemberWhereUniqueInput!
  update: MemberUpdateWithoutUserDataInput!
  create: MemberCreateWithoutUserInput!
}

input MemberWhereInput {
  """Logical AND on all given filters."""
  AND: [MemberWhereInput!]

  """Logical OR on all given filters."""
  OR: [MemberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MemberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  role: MemberRole

  """All values that are not equal to given value."""
  role_not: MemberRole

  """All values that are contained in given list."""
  role_in: [MemberRole!]

  """All values that are not contained in given list."""
  role_not_in: [MemberRole!]
  user: UserWhereInput
  project: ProjectWhereInput
  milestones_every: MilestoneWhereInput
  milestones_some: MilestoneWhereInput
  milestones_none: MilestoneWhereInput
}

input MemberWhereUniqueInput {
  id: ID
}

type Milestone implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  author: User!
  deadline: DateTime
  project: Project!
  reactions(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction!]
  member: Member!
  achieved: Boolean
  order: Int
}

"""A connection to a list of items."""
type MilestoneConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MilestoneEdge]!
  aggregate: AggregateMilestone!
}

input MilestoneCreateInput {
  title: String!
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  author: UserCreateOneWithoutMilestonesInput!
  project: ProjectCreateOneWithoutMilestonesInput!
  reactions: ReactionCreateManyWithoutMilestoneInput
  member: MemberCreateOneWithoutMilestonesInput!
}

input MilestoneCreateManyWithoutAuthorInput {
  create: [MilestoneCreateWithoutAuthorInput!]
  connect: [MilestoneWhereUniqueInput!]
}

input MilestoneCreateManyWithoutMemberInput {
  create: [MilestoneCreateWithoutMemberInput!]
  connect: [MilestoneWhereUniqueInput!]
}

input MilestoneCreateManyWithoutProjectInput {
  create: [MilestoneCreateWithoutProjectInput!]
  connect: [MilestoneWhereUniqueInput!]
}

input MilestoneCreateOneWithoutReactionsInput {
  create: MilestoneCreateWithoutReactionsInput
  connect: MilestoneWhereUniqueInput
}

input MilestoneCreateWithoutAuthorInput {
  title: String!
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  project: ProjectCreateOneWithoutMilestonesInput!
  reactions: ReactionCreateManyWithoutMilestoneInput
  member: MemberCreateOneWithoutMilestonesInput!
}

input MilestoneCreateWithoutMemberInput {
  title: String!
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  author: UserCreateOneWithoutMilestonesInput!
  project: ProjectCreateOneWithoutMilestonesInput!
  reactions: ReactionCreateManyWithoutMilestoneInput
}

input MilestoneCreateWithoutProjectInput {
  title: String!
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  author: UserCreateOneWithoutMilestonesInput!
  reactions: ReactionCreateManyWithoutMilestoneInput
  member: MemberCreateOneWithoutMilestonesInput!
}

input MilestoneCreateWithoutReactionsInput {
  title: String!
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  author: UserCreateOneWithoutMilestonesInput!
  project: ProjectCreateOneWithoutMilestonesInput!
  member: MemberCreateOneWithoutMilestonesInput!
}

"""An edge in a connection."""
type MilestoneEdge {
  """The item at the end of the edge."""
  node: Milestone!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MilestoneOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  deadline_ASC
  deadline_DESC
  achieved_ASC
  achieved_DESC
  order_ASC
  order_DESC
}

type MilestonePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
}

input MilestoneScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MilestoneScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MilestoneScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MilestoneScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  deadline: DateTime

  """All values that are not equal to given value."""
  deadline_not: DateTime

  """All values that are contained in given list."""
  deadline_in: [DateTime!]

  """All values that are not contained in given list."""
  deadline_not_in: [DateTime!]

  """All values less than the given value."""
  deadline_lt: DateTime

  """All values less than or equal the given value."""
  deadline_lte: DateTime

  """All values greater than the given value."""
  deadline_gt: DateTime

  """All values greater than or equal the given value."""
  deadline_gte: DateTime
  achieved: Boolean

  """All values that are not equal to given value."""
  achieved_not: Boolean
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
}

type MilestoneSubscriptionPayload {
  mutation: MutationType!
  node: Milestone
  updatedFields: [String!]
  previousValues: MilestonePreviousValues
}

input MilestoneSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MilestoneSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MilestoneSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MilestoneSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MilestoneWhereInput
}

input MilestoneUpdateInput {
  title: String
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  author: UserUpdateOneRequiredWithoutMilestonesInput
  project: ProjectUpdateOneRequiredWithoutMilestonesInput
  reactions: ReactionUpdateManyWithoutMilestoneInput
  member: MemberUpdateOneRequiredWithoutMilestonesInput
}

input MilestoneUpdateManyDataInput {
  title: String
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
}

input MilestoneUpdateManyMutationInput {
  title: String
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
}

input MilestoneUpdateManyWithoutAuthorInput {
  create: [MilestoneCreateWithoutAuthorInput!]
  connect: [MilestoneWhereUniqueInput!]
  set: [MilestoneWhereUniqueInput!]
  disconnect: [MilestoneWhereUniqueInput!]
  delete: [MilestoneWhereUniqueInput!]
  update: [MilestoneUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [MilestoneUpdateManyWithWhereNestedInput!]
  deleteMany: [MilestoneScalarWhereInput!]
  upsert: [MilestoneUpsertWithWhereUniqueWithoutAuthorInput!]
}

input MilestoneUpdateManyWithoutMemberInput {
  create: [MilestoneCreateWithoutMemberInput!]
  connect: [MilestoneWhereUniqueInput!]
  set: [MilestoneWhereUniqueInput!]
  disconnect: [MilestoneWhereUniqueInput!]
  delete: [MilestoneWhereUniqueInput!]
  update: [MilestoneUpdateWithWhereUniqueWithoutMemberInput!]
  updateMany: [MilestoneUpdateManyWithWhereNestedInput!]
  deleteMany: [MilestoneScalarWhereInput!]
  upsert: [MilestoneUpsertWithWhereUniqueWithoutMemberInput!]
}

input MilestoneUpdateManyWithoutProjectInput {
  create: [MilestoneCreateWithoutProjectInput!]
  connect: [MilestoneWhereUniqueInput!]
  set: [MilestoneWhereUniqueInput!]
  disconnect: [MilestoneWhereUniqueInput!]
  delete: [MilestoneWhereUniqueInput!]
  update: [MilestoneUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [MilestoneUpdateManyWithWhereNestedInput!]
  deleteMany: [MilestoneScalarWhereInput!]
  upsert: [MilestoneUpsertWithWhereUniqueWithoutProjectInput!]
}

input MilestoneUpdateManyWithWhereNestedInput {
  where: MilestoneScalarWhereInput!
  data: MilestoneUpdateManyDataInput!
}

input MilestoneUpdateOneWithoutReactionsInput {
  create: MilestoneCreateWithoutReactionsInput
  connect: MilestoneWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MilestoneUpdateWithoutReactionsDataInput
  upsert: MilestoneUpsertWithoutReactionsInput
}

input MilestoneUpdateWithoutAuthorDataInput {
  title: String
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  project: ProjectUpdateOneRequiredWithoutMilestonesInput
  reactions: ReactionUpdateManyWithoutMilestoneInput
  member: MemberUpdateOneRequiredWithoutMilestonesInput
}

input MilestoneUpdateWithoutMemberDataInput {
  title: String
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  author: UserUpdateOneRequiredWithoutMilestonesInput
  project: ProjectUpdateOneRequiredWithoutMilestonesInput
  reactions: ReactionUpdateManyWithoutMilestoneInput
}

input MilestoneUpdateWithoutProjectDataInput {
  title: String
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  author: UserUpdateOneRequiredWithoutMilestonesInput
  reactions: ReactionUpdateManyWithoutMilestoneInput
  member: MemberUpdateOneRequiredWithoutMilestonesInput
}

input MilestoneUpdateWithoutReactionsDataInput {
  title: String
  description: String
  deadline: DateTime
  achieved: Boolean
  order: Int
  author: UserUpdateOneRequiredWithoutMilestonesInput
  project: ProjectUpdateOneRequiredWithoutMilestonesInput
  member: MemberUpdateOneRequiredWithoutMilestonesInput
}

input MilestoneUpdateWithWhereUniqueWithoutAuthorInput {
  where: MilestoneWhereUniqueInput!
  data: MilestoneUpdateWithoutAuthorDataInput!
}

input MilestoneUpdateWithWhereUniqueWithoutMemberInput {
  where: MilestoneWhereUniqueInput!
  data: MilestoneUpdateWithoutMemberDataInput!
}

input MilestoneUpdateWithWhereUniqueWithoutProjectInput {
  where: MilestoneWhereUniqueInput!
  data: MilestoneUpdateWithoutProjectDataInput!
}

input MilestoneUpsertWithoutReactionsInput {
  update: MilestoneUpdateWithoutReactionsDataInput!
  create: MilestoneCreateWithoutReactionsInput!
}

input MilestoneUpsertWithWhereUniqueWithoutAuthorInput {
  where: MilestoneWhereUniqueInput!
  update: MilestoneUpdateWithoutAuthorDataInput!
  create: MilestoneCreateWithoutAuthorInput!
}

input MilestoneUpsertWithWhereUniqueWithoutMemberInput {
  where: MilestoneWhereUniqueInput!
  update: MilestoneUpdateWithoutMemberDataInput!
  create: MilestoneCreateWithoutMemberInput!
}

input MilestoneUpsertWithWhereUniqueWithoutProjectInput {
  where: MilestoneWhereUniqueInput!
  update: MilestoneUpdateWithoutProjectDataInput!
  create: MilestoneCreateWithoutProjectInput!
}

input MilestoneWhereInput {
  """Logical AND on all given filters."""
  AND: [MilestoneWhereInput!]

  """Logical OR on all given filters."""
  OR: [MilestoneWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MilestoneWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  deadline: DateTime

  """All values that are not equal to given value."""
  deadline_not: DateTime

  """All values that are contained in given list."""
  deadline_in: [DateTime!]

  """All values that are not contained in given list."""
  deadline_not_in: [DateTime!]

  """All values less than the given value."""
  deadline_lt: DateTime

  """All values less than or equal the given value."""
  deadline_lte: DateTime

  """All values greater than the given value."""
  deadline_gt: DateTime

  """All values greater than or equal the given value."""
  deadline_gte: DateTime
  achieved: Boolean

  """All values that are not equal to given value."""
  achieved_not: Boolean
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  author: UserWhereInput
  project: ProjectWhereInput
  reactions_every: ReactionWhereInput
  reactions_some: ReactionWhereInput
  reactions_none: ReactionWhereInput
  member: MemberWhereInput
}

input MilestoneWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createFile(data: FileCreateInput!): File!
  createProject(data: ProjectCreateInput!): Project!
  createMember(data: MemberCreateInput!): Member!
  createPost(data: PostCreateInput!): Post!
  createComment(data: CommentCreateInput!): Comment!
  createReaction(data: ReactionCreateInput!): Reaction!
  createMilestone(data: MilestoneCreateInput!): Milestone!
  createSubscriber(data: SubscriberCreateInput!): Subscriber!
  createMail(data: MailCreateInput!): Mail!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateMember(data: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateReaction(data: ReactionUpdateInput!, where: ReactionWhereUniqueInput!): Reaction
  updateMilestone(data: MilestoneUpdateInput!, where: MilestoneWhereUniqueInput!): Milestone
  updateSubscriber(data: SubscriberUpdateInput!, where: SubscriberWhereUniqueInput!): Subscriber
  updateMail(data: MailUpdateInput!, where: MailWhereUniqueInput!): Mail
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFile(where: FileWhereUniqueInput!): File
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteMember(where: MemberWhereUniqueInput!): Member
  deletePost(where: PostWhereUniqueInput!): Post
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteReaction(where: ReactionWhereUniqueInput!): Reaction
  deleteMilestone(where: MilestoneWhereUniqueInput!): Milestone
  deleteSubscriber(where: SubscriberWhereUniqueInput!): Subscriber
  deleteMail(where: MailWhereUniqueInput!): Mail
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertMember(where: MemberWhereUniqueInput!, create: MemberCreateInput!, update: MemberUpdateInput!): Member!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertReaction(where: ReactionWhereUniqueInput!, create: ReactionCreateInput!, update: ReactionUpdateInput!): Reaction!
  upsertMilestone(where: MilestoneWhereUniqueInput!, create: MilestoneCreateInput!, update: MilestoneUpdateInput!): Milestone!
  upsertSubscriber(where: SubscriberWhereUniqueInput!, create: SubscriberCreateInput!, update: SubscriberUpdateInput!): Subscriber!
  upsertMail(where: MailWhereUniqueInput!, create: MailCreateInput!, update: MailUpdateInput!): Mail!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyMembers(data: MemberUpdateManyMutationInput!, where: MemberWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyReactions(data: ReactionUpdateManyMutationInput!, where: ReactionWhereInput): BatchPayload!
  updateManyMilestones(data: MilestoneUpdateManyMutationInput!, where: MilestoneWhereInput): BatchPayload!
  updateManySubscribers(data: SubscriberUpdateManyMutationInput!, where: SubscriberWhereInput): BatchPayload!
  updateManyMails(data: MailUpdateManyMutationInput!, where: MailWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyMembers(where: MemberWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyReactions(where: ReactionWhereInput): BatchPayload!
  deleteManyMilestones(where: MilestoneWhereInput): BatchPayload!
  deleteManySubscribers(where: SubscriberWhereInput): BatchPayload!
  deleteManyMails(where: MailWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  voters(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  project: Project
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  body: String!
  published: Boolean
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  voters: UserCreateManyWithoutVotedPostsInput
  project: ProjectCreateOneWithoutPostsInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutProjectInput {
  create: [PostCreateWithoutProjectInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutVotersInput {
  create: [PostCreateWithoutVotersInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  title: String!
  body: String!
  published: Boolean
  comments: CommentCreateManyWithoutPostInput
  voters: UserCreateManyWithoutVotedPostsInput
  project: ProjectCreateOneWithoutPostsInput
}

input PostCreateWithoutCommentsInput {
  title: String!
  body: String!
  published: Boolean
  author: UserCreateOneWithoutPostsInput!
  voters: UserCreateManyWithoutVotedPostsInput
  project: ProjectCreateOneWithoutPostsInput
}

input PostCreateWithoutProjectInput {
  title: String!
  body: String!
  published: Boolean
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  voters: UserCreateManyWithoutVotedPostsInput
}

input PostCreateWithoutVotersInput {
  title: String!
  body: String!
  published: Boolean
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  project: ProjectCreateOneWithoutPostsInput
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  body: String!
  published: Boolean!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  voters: UserUpdateManyWithoutVotedPostsInput
  project: ProjectUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithoutProjectInput {
  create: [PostCreateWithoutProjectInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutProjectInput!]
}

input PostUpdateManyWithoutVotersInput {
  create: [PostCreateWithoutVotersInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutVotersInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutVotersInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  body: String
  published: Boolean
  comments: CommentUpdateManyWithoutPostInput
  voters: UserUpdateManyWithoutVotedPostsInput
  project: ProjectUpdateOneWithoutPostsInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  voters: UserUpdateManyWithoutVotedPostsInput
  project: ProjectUpdateOneWithoutPostsInput
}

input PostUpdateWithoutProjectDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  voters: UserUpdateManyWithoutVotedPostsInput
}

input PostUpdateWithoutVotersDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  project: ProjectUpdateOneWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpdateWithWhereUniqueWithoutProjectInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutProjectDataInput!
}

input PostUpdateWithWhereUniqueWithoutVotersInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutVotersDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpsertWithWhereUniqueWithoutProjectInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutProjectDataInput!
  create: PostCreateWithoutProjectInput!
}

input PostUpsertWithWhereUniqueWithoutVotersInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutVotersDataInput!
  create: PostCreateWithoutVotersInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  voters_every: UserWhereInput
  voters_some: UserWhereInput
  voters_none: UserWhereInput
  project: ProjectWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Project implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  author: User!
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member!]
  voters(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  favoritedUsers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  heroImageId: String
  milestones(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Milestone!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  published: Boolean
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
  author: UserCreateOneWithoutProjectsInput!
  members: MemberCreateManyWithoutProjectInput
  voters: UserCreateManyWithoutVotedProjectsInput
  favoritedUsers: UserCreateManyWithoutFavoriteProjectsInput
  files: FileCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  posts: PostCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutAuthorInput {
  create: [ProjectCreateWithoutAuthorInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutFavoritedUsersInput {
  create: [ProjectCreateWithoutFavoritedUsersInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutVotersInput {
  create: [ProjectCreateWithoutVotersInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutFilesInput {
  create: ProjectCreateWithoutFilesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutMembersInput {
  create: ProjectCreateWithoutMembersInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutMilestonesInput {
  create: ProjectCreateWithoutMilestonesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutPostsInput {
  create: ProjectCreateWithoutPostsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutAuthorInput {
  published: Boolean
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
  members: MemberCreateManyWithoutProjectInput
  voters: UserCreateManyWithoutVotedProjectsInput
  favoritedUsers: UserCreateManyWithoutFavoriteProjectsInput
  files: FileCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  posts: PostCreateManyWithoutProjectInput
}

input ProjectCreateWithoutFavoritedUsersInput {
  published: Boolean
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
  author: UserCreateOneWithoutProjectsInput!
  members: MemberCreateManyWithoutProjectInput
  voters: UserCreateManyWithoutVotedProjectsInput
  files: FileCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  posts: PostCreateManyWithoutProjectInput
}

input ProjectCreateWithoutFilesInput {
  published: Boolean
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
  author: UserCreateOneWithoutProjectsInput!
  members: MemberCreateManyWithoutProjectInput
  voters: UserCreateManyWithoutVotedProjectsInput
  favoritedUsers: UserCreateManyWithoutFavoriteProjectsInput
  milestones: MilestoneCreateManyWithoutProjectInput
  posts: PostCreateManyWithoutProjectInput
}

input ProjectCreateWithoutMembersInput {
  published: Boolean
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
  author: UserCreateOneWithoutProjectsInput!
  voters: UserCreateManyWithoutVotedProjectsInput
  favoritedUsers: UserCreateManyWithoutFavoriteProjectsInput
  files: FileCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  posts: PostCreateManyWithoutProjectInput
}

input ProjectCreateWithoutMilestonesInput {
  published: Boolean
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
  author: UserCreateOneWithoutProjectsInput!
  members: MemberCreateManyWithoutProjectInput
  voters: UserCreateManyWithoutVotedProjectsInput
  favoritedUsers: UserCreateManyWithoutFavoriteProjectsInput
  files: FileCreateManyWithoutProjectInput
  posts: PostCreateManyWithoutProjectInput
}

input ProjectCreateWithoutPostsInput {
  published: Boolean
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
  author: UserCreateOneWithoutProjectsInput!
  members: MemberCreateManyWithoutProjectInput
  voters: UserCreateManyWithoutVotedProjectsInput
  favoritedUsers: UserCreateManyWithoutFavoriteProjectsInput
  files: FileCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
}

input ProjectCreateWithoutVotersInput {
  published: Boolean
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
  author: UserCreateOneWithoutProjectsInput!
  members: MemberCreateManyWithoutProjectInput
  favoritedUsers: UserCreateManyWithoutFavoriteProjectsInput
  files: FileCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  posts: PostCreateManyWithoutProjectInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  published_ASC
  published_DESC
  featured_ASC
  featured_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  body_ASC
  body_DESC
  heroImageId_ASC
  heroImageId_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  featured: Boolean
  name: String!
  url: String!
  title: String!
  description: String
  body: Json
  heroImageId: String
}

input ProjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  featured: Boolean

  """All values that are not equal to given value."""
  featured_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  heroImageId: String

  """All values that are not equal to given value."""
  heroImageId_not: String

  """All values that are contained in given list."""
  heroImageId_in: [String!]

  """All values that are not contained in given list."""
  heroImageId_not_in: [String!]

  """All values less than the given value."""
  heroImageId_lt: String

  """All values less than or equal the given value."""
  heroImageId_lte: String

  """All values greater than the given value."""
  heroImageId_gt: String

  """All values greater than or equal the given value."""
  heroImageId_gte: String

  """All values containing the given string."""
  heroImageId_contains: String

  """All values not containing the given string."""
  heroImageId_not_contains: String

  """All values starting with the given string."""
  heroImageId_starts_with: String

  """All values not starting with the given string."""
  heroImageId_not_starts_with: String

  """All values ending with the given string."""
  heroImageId_ends_with: String

  """All values not ending with the given string."""
  heroImageId_not_ends_with: String
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
  author: UserUpdateOneRequiredWithoutProjectsInput
  members: MemberUpdateManyWithoutProjectInput
  voters: UserUpdateManyWithoutVotedProjectsInput
  favoritedUsers: UserUpdateManyWithoutFavoriteProjectsInput
  files: FileUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  posts: PostUpdateManyWithoutProjectInput
}

input ProjectUpdateManyDataInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
}

input ProjectUpdateManyMutationInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
}

input ProjectUpdateManyWithoutAuthorInput {
  create: [ProjectCreateWithoutAuthorInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectScalarWhereInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ProjectUpdateManyWithoutFavoritedUsersInput {
  create: [ProjectCreateWithoutFavoritedUsersInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutFavoritedUsersInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectScalarWhereInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutFavoritedUsersInput!]
}

input ProjectUpdateManyWithoutVotersInput {
  create: [ProjectCreateWithoutVotersInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutVotersInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectScalarWhereInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutVotersInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateOneRequiredWithoutMembersInput {
  create: ProjectCreateWithoutMembersInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutMembersDataInput
  upsert: ProjectUpsertWithoutMembersInput
}

input ProjectUpdateOneRequiredWithoutMilestonesInput {
  create: ProjectCreateWithoutMilestonesInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutMilestonesDataInput
  upsert: ProjectUpsertWithoutMilestonesInput
}

input ProjectUpdateOneWithoutFilesInput {
  create: ProjectCreateWithoutFilesInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateWithoutFilesDataInput
  upsert: ProjectUpsertWithoutFilesInput
}

input ProjectUpdateOneWithoutPostsInput {
  create: ProjectCreateWithoutPostsInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateWithoutPostsDataInput
  upsert: ProjectUpsertWithoutPostsInput
}

input ProjectUpdateWithoutAuthorDataInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
  members: MemberUpdateManyWithoutProjectInput
  voters: UserUpdateManyWithoutVotedProjectsInput
  favoritedUsers: UserUpdateManyWithoutFavoriteProjectsInput
  files: FileUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  posts: PostUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutFavoritedUsersDataInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
  author: UserUpdateOneRequiredWithoutProjectsInput
  members: MemberUpdateManyWithoutProjectInput
  voters: UserUpdateManyWithoutVotedProjectsInput
  files: FileUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  posts: PostUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutFilesDataInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
  author: UserUpdateOneRequiredWithoutProjectsInput
  members: MemberUpdateManyWithoutProjectInput
  voters: UserUpdateManyWithoutVotedProjectsInput
  favoritedUsers: UserUpdateManyWithoutFavoriteProjectsInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  posts: PostUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutMembersDataInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
  author: UserUpdateOneRequiredWithoutProjectsInput
  voters: UserUpdateManyWithoutVotedProjectsInput
  favoritedUsers: UserUpdateManyWithoutFavoriteProjectsInput
  files: FileUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  posts: PostUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutMilestonesDataInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
  author: UserUpdateOneRequiredWithoutProjectsInput
  members: MemberUpdateManyWithoutProjectInput
  voters: UserUpdateManyWithoutVotedProjectsInput
  favoritedUsers: UserUpdateManyWithoutFavoriteProjectsInput
  files: FileUpdateManyWithoutProjectInput
  posts: PostUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutPostsDataInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
  author: UserUpdateOneRequiredWithoutProjectsInput
  members: MemberUpdateManyWithoutProjectInput
  voters: UserUpdateManyWithoutVotedProjectsInput
  favoritedUsers: UserUpdateManyWithoutFavoriteProjectsInput
  files: FileUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutVotersDataInput {
  published: Boolean
  featured: Boolean
  name: String
  url: String
  title: String
  description: String
  body: Json
  heroImageId: String
  author: UserUpdateOneRequiredWithoutProjectsInput
  members: MemberUpdateManyWithoutProjectInput
  favoritedUsers: UserUpdateManyWithoutFavoriteProjectsInput
  files: FileUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  posts: PostUpdateManyWithoutProjectInput
}

input ProjectUpdateWithWhereUniqueWithoutAuthorInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutAuthorDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutFavoritedUsersInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutFavoritedUsersDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutVotersInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutVotersDataInput!
}

input ProjectUpsertWithoutFilesInput {
  update: ProjectUpdateWithoutFilesDataInput!
  create: ProjectCreateWithoutFilesInput!
}

input ProjectUpsertWithoutMembersInput {
  update: ProjectUpdateWithoutMembersDataInput!
  create: ProjectCreateWithoutMembersInput!
}

input ProjectUpsertWithoutMilestonesInput {
  update: ProjectUpdateWithoutMilestonesDataInput!
  create: ProjectCreateWithoutMilestonesInput!
}

input ProjectUpsertWithoutPostsInput {
  update: ProjectUpdateWithoutPostsDataInput!
  create: ProjectCreateWithoutPostsInput!
}

input ProjectUpsertWithWhereUniqueWithoutAuthorInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutAuthorDataInput!
  create: ProjectCreateWithoutAuthorInput!
}

input ProjectUpsertWithWhereUniqueWithoutFavoritedUsersInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutFavoritedUsersDataInput!
  create: ProjectCreateWithoutFavoritedUsersInput!
}

input ProjectUpsertWithWhereUniqueWithoutVotersInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutVotersDataInput!
  create: ProjectCreateWithoutVotersInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  featured: Boolean

  """All values that are not equal to given value."""
  featured_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  heroImageId: String

  """All values that are not equal to given value."""
  heroImageId_not: String

  """All values that are contained in given list."""
  heroImageId_in: [String!]

  """All values that are not contained in given list."""
  heroImageId_not_in: [String!]

  """All values less than the given value."""
  heroImageId_lt: String

  """All values less than or equal the given value."""
  heroImageId_lte: String

  """All values greater than the given value."""
  heroImageId_gt: String

  """All values greater than or equal the given value."""
  heroImageId_gte: String

  """All values containing the given string."""
  heroImageId_contains: String

  """All values not containing the given string."""
  heroImageId_not_contains: String

  """All values starting with the given string."""
  heroImageId_starts_with: String

  """All values not starting with the given string."""
  heroImageId_not_starts_with: String

  """All values ending with the given string."""
  heroImageId_ends_with: String

  """All values not ending with the given string."""
  heroImageId_not_ends_with: String
  author: UserWhereInput
  members_every: MemberWhereInput
  members_some: MemberWhereInput
  members_none: MemberWhereInput
  voters_every: UserWhereInput
  voters_some: UserWhereInput
  voters_none: UserWhereInput
  favoritedUsers_every: UserWhereInput
  favoritedUsers_some: UserWhereInput
  favoritedUsers_none: UserWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  milestones_every: MilestoneWhereInput
  milestones_some: MilestoneWhereInput
  milestones_none: MilestoneWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
  url: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  reactions(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction]!
  milestones(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Milestone]!
  subscribers(where: SubscriberWhereInput, orderBy: SubscriberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subscriber]!
  mails(where: MailWhereInput, orderBy: MailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mail]!
  user(where: UserWhereUniqueInput!): User
  file(where: FileWhereUniqueInput!): File
  project(where: ProjectWhereUniqueInput!): Project
  member(where: MemberWhereUniqueInput!): Member
  post(where: PostWhereUniqueInput!): Post
  comment(where: CommentWhereUniqueInput!): Comment
  reaction(where: ReactionWhereUniqueInput!): Reaction
  milestone(where: MilestoneWhereUniqueInput!): Milestone
  subscriber(where: SubscriberWhereUniqueInput!): Subscriber
  mail(where: MailWhereUniqueInput!): Mail
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  membersConnection(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  reactionsConnection(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReactionConnection!
  milestonesConnection(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MilestoneConnection!
  subscribersConnection(where: SubscriberWhereInput, orderBy: SubscriberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubscriberConnection!
  mailsConnection(where: MailWhereInput, orderBy: MailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MailConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Reaction implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  emoji: String!
  comment: Comment
  milestone: Milestone
}

"""A connection to a list of items."""
type ReactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReactionEdge]!
  aggregate: AggregateReaction!
}

input ReactionCreateInput {
  emoji: String!
  author: UserCreateOneWithoutReactionsInput!
  comment: CommentCreateOneWithoutReactionsInput
  milestone: MilestoneCreateOneWithoutReactionsInput
}

input ReactionCreateManyWithoutAuthorInput {
  create: [ReactionCreateWithoutAuthorInput!]
  connect: [ReactionWhereUniqueInput!]
}

input ReactionCreateManyWithoutCommentInput {
  create: [ReactionCreateWithoutCommentInput!]
  connect: [ReactionWhereUniqueInput!]
}

input ReactionCreateManyWithoutMilestoneInput {
  create: [ReactionCreateWithoutMilestoneInput!]
  connect: [ReactionWhereUniqueInput!]
}

input ReactionCreateWithoutAuthorInput {
  emoji: String!
  comment: CommentCreateOneWithoutReactionsInput
  milestone: MilestoneCreateOneWithoutReactionsInput
}

input ReactionCreateWithoutCommentInput {
  emoji: String!
  author: UserCreateOneWithoutReactionsInput!
  milestone: MilestoneCreateOneWithoutReactionsInput
}

input ReactionCreateWithoutMilestoneInput {
  emoji: String!
  author: UserCreateOneWithoutReactionsInput!
  comment: CommentCreateOneWithoutReactionsInput
}

"""An edge in a connection."""
type ReactionEdge {
  """The item at the end of the edge."""
  node: Reaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReactionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  emoji_ASC
  emoji_DESC
}

type ReactionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  emoji: String!
}

input ReactionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReactionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReactionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReactionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  emoji: String

  """All values that are not equal to given value."""
  emoji_not: String

  """All values that are contained in given list."""
  emoji_in: [String!]

  """All values that are not contained in given list."""
  emoji_not_in: [String!]

  """All values less than the given value."""
  emoji_lt: String

  """All values less than or equal the given value."""
  emoji_lte: String

  """All values greater than the given value."""
  emoji_gt: String

  """All values greater than or equal the given value."""
  emoji_gte: String

  """All values containing the given string."""
  emoji_contains: String

  """All values not containing the given string."""
  emoji_not_contains: String

  """All values starting with the given string."""
  emoji_starts_with: String

  """All values not starting with the given string."""
  emoji_not_starts_with: String

  """All values ending with the given string."""
  emoji_ends_with: String

  """All values not ending with the given string."""
  emoji_not_ends_with: String
}

type ReactionSubscriptionPayload {
  mutation: MutationType!
  node: Reaction
  updatedFields: [String!]
  previousValues: ReactionPreviousValues
}

input ReactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReactionWhereInput
}

input ReactionUpdateInput {
  emoji: String
  author: UserUpdateOneRequiredWithoutReactionsInput
  comment: CommentUpdateOneWithoutReactionsInput
  milestone: MilestoneUpdateOneWithoutReactionsInput
}

input ReactionUpdateManyDataInput {
  emoji: String
}

input ReactionUpdateManyMutationInput {
  emoji: String
}

input ReactionUpdateManyWithoutAuthorInput {
  create: [ReactionCreateWithoutAuthorInput!]
  connect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  disconnect: [ReactionWhereUniqueInput!]
  delete: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ReactionUpdateManyWithWhereNestedInput!]
  deleteMany: [ReactionScalarWhereInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ReactionUpdateManyWithoutCommentInput {
  create: [ReactionCreateWithoutCommentInput!]
  connect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  disconnect: [ReactionWhereUniqueInput!]
  delete: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [ReactionUpdateManyWithWhereNestedInput!]
  deleteMany: [ReactionScalarWhereInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutCommentInput!]
}

input ReactionUpdateManyWithoutMilestoneInput {
  create: [ReactionCreateWithoutMilestoneInput!]
  connect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  disconnect: [ReactionWhereUniqueInput!]
  delete: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutMilestoneInput!]
  updateMany: [ReactionUpdateManyWithWhereNestedInput!]
  deleteMany: [ReactionScalarWhereInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutMilestoneInput!]
}

input ReactionUpdateManyWithWhereNestedInput {
  where: ReactionScalarWhereInput!
  data: ReactionUpdateManyDataInput!
}

input ReactionUpdateWithoutAuthorDataInput {
  emoji: String
  comment: CommentUpdateOneWithoutReactionsInput
  milestone: MilestoneUpdateOneWithoutReactionsInput
}

input ReactionUpdateWithoutCommentDataInput {
  emoji: String
  author: UserUpdateOneRequiredWithoutReactionsInput
  milestone: MilestoneUpdateOneWithoutReactionsInput
}

input ReactionUpdateWithoutMilestoneDataInput {
  emoji: String
  author: UserUpdateOneRequiredWithoutReactionsInput
  comment: CommentUpdateOneWithoutReactionsInput
}

input ReactionUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReactionWhereUniqueInput!
  data: ReactionUpdateWithoutAuthorDataInput!
}

input ReactionUpdateWithWhereUniqueWithoutCommentInput {
  where: ReactionWhereUniqueInput!
  data: ReactionUpdateWithoutCommentDataInput!
}

input ReactionUpdateWithWhereUniqueWithoutMilestoneInput {
  where: ReactionWhereUniqueInput!
  data: ReactionUpdateWithoutMilestoneDataInput!
}

input ReactionUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReactionWhereUniqueInput!
  update: ReactionUpdateWithoutAuthorDataInput!
  create: ReactionCreateWithoutAuthorInput!
}

input ReactionUpsertWithWhereUniqueWithoutCommentInput {
  where: ReactionWhereUniqueInput!
  update: ReactionUpdateWithoutCommentDataInput!
  create: ReactionCreateWithoutCommentInput!
}

input ReactionUpsertWithWhereUniqueWithoutMilestoneInput {
  where: ReactionWhereUniqueInput!
  update: ReactionUpdateWithoutMilestoneDataInput!
  create: ReactionCreateWithoutMilestoneInput!
}

input ReactionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  emoji: String

  """All values that are not equal to given value."""
  emoji_not: String

  """All values that are contained in given list."""
  emoji_in: [String!]

  """All values that are not contained in given list."""
  emoji_not_in: [String!]

  """All values less than the given value."""
  emoji_lt: String

  """All values less than or equal the given value."""
  emoji_lte: String

  """All values greater than the given value."""
  emoji_gt: String

  """All values greater than or equal the given value."""
  emoji_gte: String

  """All values containing the given string."""
  emoji_contains: String

  """All values not containing the given string."""
  emoji_not_contains: String

  """All values starting with the given string."""
  emoji_starts_with: String

  """All values not starting with the given string."""
  emoji_not_starts_with: String

  """All values ending with the given string."""
  emoji_ends_with: String

  """All values not ending with the given string."""
  emoji_not_ends_with: String
  author: UserWhereInput
  comment: CommentWhereInput
  milestone: MilestoneWhereInput
}

input ReactionWhereUniqueInput {
  id: ID
}

type Subscriber implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  dripId: String
  email: String!
  status: SubscriberStatus
  visitorUuid: String
  newEmail: String
  userId: String
  timeZone: String
  utcOffset: String
  lifetimeValue: Int
  ipAddress: String
  userAgent: String
  originalReferrer: String
  landingUrl: String
  customFields: Json
  tags: [String!]!
  removeTags: [String!]!
  prospect: Boolean
  baseLeadScore: Int
  leadScore: Int
  euConsent: SubscriberEuConsent
  euConsentMessage: String
}

"""A connection to a list of items."""
type SubscriberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubscriberEdge]!
  aggregate: AggregateSubscriber!
}

input SubscriberCreateInput {
  dripId: String
  email: String!
  status: SubscriberStatus
  visitorUuid: String
  newEmail: String
  userId: String
  timeZone: String
  utcOffset: String
  lifetimeValue: Int
  ipAddress: String
  userAgent: String
  originalReferrer: String
  landingUrl: String
  customFields: Json
  prospect: Boolean
  baseLeadScore: Int
  leadScore: Int
  euConsent: SubscriberEuConsent
  euConsentMessage: String
  tags: SubscriberCreatetagsInput
  removeTags: SubscriberCreateremoveTagsInput
}

input SubscriberCreateremoveTagsInput {
  set: [String!]
}

input SubscriberCreatetagsInput {
  set: [String!]
}

"""An edge in a connection."""
type SubscriberEdge {
  """The item at the end of the edge."""
  node: Subscriber!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubscriberEuConsent {
  GRANTED
  DENIED
  UNKNOWN
}

enum SubscriberOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  dripId_ASC
  dripId_DESC
  email_ASC
  email_DESC
  status_ASC
  status_DESC
  visitorUuid_ASC
  visitorUuid_DESC
  newEmail_ASC
  newEmail_DESC
  userId_ASC
  userId_DESC
  timeZone_ASC
  timeZone_DESC
  utcOffset_ASC
  utcOffset_DESC
  lifetimeValue_ASC
  lifetimeValue_DESC
  ipAddress_ASC
  ipAddress_DESC
  userAgent_ASC
  userAgent_DESC
  originalReferrer_ASC
  originalReferrer_DESC
  landingUrl_ASC
  landingUrl_DESC
  customFields_ASC
  customFields_DESC
  prospect_ASC
  prospect_DESC
  baseLeadScore_ASC
  baseLeadScore_DESC
  leadScore_ASC
  leadScore_DESC
  euConsent_ASC
  euConsent_DESC
  euConsentMessage_ASC
  euConsentMessage_DESC
}

type SubscriberPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  dripId: String
  email: String!
  status: SubscriberStatus
  visitorUuid: String
  newEmail: String
  userId: String
  timeZone: String
  utcOffset: String
  lifetimeValue: Int
  ipAddress: String
  userAgent: String
  originalReferrer: String
  landingUrl: String
  customFields: Json
  tags: [String!]!
  removeTags: [String!]!
  prospect: Boolean
  baseLeadScore: Int
  leadScore: Int
  euConsent: SubscriberEuConsent
  euConsentMessage: String
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
}

type SubscriberSubscriptionPayload {
  mutation: MutationType!
  node: Subscriber
  updatedFields: [String!]
  previousValues: SubscriberPreviousValues
}

input SubscriberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubscriberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubscriberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubscriberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubscriberWhereInput
}

input SubscriberUpdateInput {
  dripId: String
  email: String
  status: SubscriberStatus
  visitorUuid: String
  newEmail: String
  userId: String
  timeZone: String
  utcOffset: String
  lifetimeValue: Int
  ipAddress: String
  userAgent: String
  originalReferrer: String
  landingUrl: String
  customFields: Json
  prospect: Boolean
  baseLeadScore: Int
  leadScore: Int
  euConsent: SubscriberEuConsent
  euConsentMessage: String
  tags: SubscriberUpdatetagsInput
  removeTags: SubscriberUpdateremoveTagsInput
}

input SubscriberUpdateManyMutationInput {
  dripId: String
  email: String
  status: SubscriberStatus
  visitorUuid: String
  newEmail: String
  userId: String
  timeZone: String
  utcOffset: String
  lifetimeValue: Int
  ipAddress: String
  userAgent: String
  originalReferrer: String
  landingUrl: String
  customFields: Json
  prospect: Boolean
  baseLeadScore: Int
  leadScore: Int
  euConsent: SubscriberEuConsent
  euConsentMessage: String
  tags: SubscriberUpdatetagsInput
  removeTags: SubscriberUpdateremoveTagsInput
}

input SubscriberUpdateremoveTagsInput {
  set: [String!]
}

input SubscriberUpdatetagsInput {
  set: [String!]
}

input SubscriberWhereInput {
  """Logical AND on all given filters."""
  AND: [SubscriberWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubscriberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubscriberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  dripId: String

  """All values that are not equal to given value."""
  dripId_not: String

  """All values that are contained in given list."""
  dripId_in: [String!]

  """All values that are not contained in given list."""
  dripId_not_in: [String!]

  """All values less than the given value."""
  dripId_lt: String

  """All values less than or equal the given value."""
  dripId_lte: String

  """All values greater than the given value."""
  dripId_gt: String

  """All values greater than or equal the given value."""
  dripId_gte: String

  """All values containing the given string."""
  dripId_contains: String

  """All values not containing the given string."""
  dripId_not_contains: String

  """All values starting with the given string."""
  dripId_starts_with: String

  """All values not starting with the given string."""
  dripId_not_starts_with: String

  """All values ending with the given string."""
  dripId_ends_with: String

  """All values not ending with the given string."""
  dripId_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  status: SubscriberStatus

  """All values that are not equal to given value."""
  status_not: SubscriberStatus

  """All values that are contained in given list."""
  status_in: [SubscriberStatus!]

  """All values that are not contained in given list."""
  status_not_in: [SubscriberStatus!]
  visitorUuid: String

  """All values that are not equal to given value."""
  visitorUuid_not: String

  """All values that are contained in given list."""
  visitorUuid_in: [String!]

  """All values that are not contained in given list."""
  visitorUuid_not_in: [String!]

  """All values less than the given value."""
  visitorUuid_lt: String

  """All values less than or equal the given value."""
  visitorUuid_lte: String

  """All values greater than the given value."""
  visitorUuid_gt: String

  """All values greater than or equal the given value."""
  visitorUuid_gte: String

  """All values containing the given string."""
  visitorUuid_contains: String

  """All values not containing the given string."""
  visitorUuid_not_contains: String

  """All values starting with the given string."""
  visitorUuid_starts_with: String

  """All values not starting with the given string."""
  visitorUuid_not_starts_with: String

  """All values ending with the given string."""
  visitorUuid_ends_with: String

  """All values not ending with the given string."""
  visitorUuid_not_ends_with: String
  newEmail: String

  """All values that are not equal to given value."""
  newEmail_not: String

  """All values that are contained in given list."""
  newEmail_in: [String!]

  """All values that are not contained in given list."""
  newEmail_not_in: [String!]

  """All values less than the given value."""
  newEmail_lt: String

  """All values less than or equal the given value."""
  newEmail_lte: String

  """All values greater than the given value."""
  newEmail_gt: String

  """All values greater than or equal the given value."""
  newEmail_gte: String

  """All values containing the given string."""
  newEmail_contains: String

  """All values not containing the given string."""
  newEmail_not_contains: String

  """All values starting with the given string."""
  newEmail_starts_with: String

  """All values not starting with the given string."""
  newEmail_not_starts_with: String

  """All values ending with the given string."""
  newEmail_ends_with: String

  """All values not ending with the given string."""
  newEmail_not_ends_with: String
  userId: String

  """All values that are not equal to given value."""
  userId_not: String

  """All values that are contained in given list."""
  userId_in: [String!]

  """All values that are not contained in given list."""
  userId_not_in: [String!]

  """All values less than the given value."""
  userId_lt: String

  """All values less than or equal the given value."""
  userId_lte: String

  """All values greater than the given value."""
  userId_gt: String

  """All values greater than or equal the given value."""
  userId_gte: String

  """All values containing the given string."""
  userId_contains: String

  """All values not containing the given string."""
  userId_not_contains: String

  """All values starting with the given string."""
  userId_starts_with: String

  """All values not starting with the given string."""
  userId_not_starts_with: String

  """All values ending with the given string."""
  userId_ends_with: String

  """All values not ending with the given string."""
  userId_not_ends_with: String
  timeZone: String

  """All values that are not equal to given value."""
  timeZone_not: String

  """All values that are contained in given list."""
  timeZone_in: [String!]

  """All values that are not contained in given list."""
  timeZone_not_in: [String!]

  """All values less than the given value."""
  timeZone_lt: String

  """All values less than or equal the given value."""
  timeZone_lte: String

  """All values greater than the given value."""
  timeZone_gt: String

  """All values greater than or equal the given value."""
  timeZone_gte: String

  """All values containing the given string."""
  timeZone_contains: String

  """All values not containing the given string."""
  timeZone_not_contains: String

  """All values starting with the given string."""
  timeZone_starts_with: String

  """All values not starting with the given string."""
  timeZone_not_starts_with: String

  """All values ending with the given string."""
  timeZone_ends_with: String

  """All values not ending with the given string."""
  timeZone_not_ends_with: String
  utcOffset: String

  """All values that are not equal to given value."""
  utcOffset_not: String

  """All values that are contained in given list."""
  utcOffset_in: [String!]

  """All values that are not contained in given list."""
  utcOffset_not_in: [String!]

  """All values less than the given value."""
  utcOffset_lt: String

  """All values less than or equal the given value."""
  utcOffset_lte: String

  """All values greater than the given value."""
  utcOffset_gt: String

  """All values greater than or equal the given value."""
  utcOffset_gte: String

  """All values containing the given string."""
  utcOffset_contains: String

  """All values not containing the given string."""
  utcOffset_not_contains: String

  """All values starting with the given string."""
  utcOffset_starts_with: String

  """All values not starting with the given string."""
  utcOffset_not_starts_with: String

  """All values ending with the given string."""
  utcOffset_ends_with: String

  """All values not ending with the given string."""
  utcOffset_not_ends_with: String
  lifetimeValue: Int

  """All values that are not equal to given value."""
  lifetimeValue_not: Int

  """All values that are contained in given list."""
  lifetimeValue_in: [Int!]

  """All values that are not contained in given list."""
  lifetimeValue_not_in: [Int!]

  """All values less than the given value."""
  lifetimeValue_lt: Int

  """All values less than or equal the given value."""
  lifetimeValue_lte: Int

  """All values greater than the given value."""
  lifetimeValue_gt: Int

  """All values greater than or equal the given value."""
  lifetimeValue_gte: Int
  ipAddress: String

  """All values that are not equal to given value."""
  ipAddress_not: String

  """All values that are contained in given list."""
  ipAddress_in: [String!]

  """All values that are not contained in given list."""
  ipAddress_not_in: [String!]

  """All values less than the given value."""
  ipAddress_lt: String

  """All values less than or equal the given value."""
  ipAddress_lte: String

  """All values greater than the given value."""
  ipAddress_gt: String

  """All values greater than or equal the given value."""
  ipAddress_gte: String

  """All values containing the given string."""
  ipAddress_contains: String

  """All values not containing the given string."""
  ipAddress_not_contains: String

  """All values starting with the given string."""
  ipAddress_starts_with: String

  """All values not starting with the given string."""
  ipAddress_not_starts_with: String

  """All values ending with the given string."""
  ipAddress_ends_with: String

  """All values not ending with the given string."""
  ipAddress_not_ends_with: String
  userAgent: String

  """All values that are not equal to given value."""
  userAgent_not: String

  """All values that are contained in given list."""
  userAgent_in: [String!]

  """All values that are not contained in given list."""
  userAgent_not_in: [String!]

  """All values less than the given value."""
  userAgent_lt: String

  """All values less than or equal the given value."""
  userAgent_lte: String

  """All values greater than the given value."""
  userAgent_gt: String

  """All values greater than or equal the given value."""
  userAgent_gte: String

  """All values containing the given string."""
  userAgent_contains: String

  """All values not containing the given string."""
  userAgent_not_contains: String

  """All values starting with the given string."""
  userAgent_starts_with: String

  """All values not starting with the given string."""
  userAgent_not_starts_with: String

  """All values ending with the given string."""
  userAgent_ends_with: String

  """All values not ending with the given string."""
  userAgent_not_ends_with: String
  originalReferrer: String

  """All values that are not equal to given value."""
  originalReferrer_not: String

  """All values that are contained in given list."""
  originalReferrer_in: [String!]

  """All values that are not contained in given list."""
  originalReferrer_not_in: [String!]

  """All values less than the given value."""
  originalReferrer_lt: String

  """All values less than or equal the given value."""
  originalReferrer_lte: String

  """All values greater than the given value."""
  originalReferrer_gt: String

  """All values greater than or equal the given value."""
  originalReferrer_gte: String

  """All values containing the given string."""
  originalReferrer_contains: String

  """All values not containing the given string."""
  originalReferrer_not_contains: String

  """All values starting with the given string."""
  originalReferrer_starts_with: String

  """All values not starting with the given string."""
  originalReferrer_not_starts_with: String

  """All values ending with the given string."""
  originalReferrer_ends_with: String

  """All values not ending with the given string."""
  originalReferrer_not_ends_with: String
  landingUrl: String

  """All values that are not equal to given value."""
  landingUrl_not: String

  """All values that are contained in given list."""
  landingUrl_in: [String!]

  """All values that are not contained in given list."""
  landingUrl_not_in: [String!]

  """All values less than the given value."""
  landingUrl_lt: String

  """All values less than or equal the given value."""
  landingUrl_lte: String

  """All values greater than the given value."""
  landingUrl_gt: String

  """All values greater than or equal the given value."""
  landingUrl_gte: String

  """All values containing the given string."""
  landingUrl_contains: String

  """All values not containing the given string."""
  landingUrl_not_contains: String

  """All values starting with the given string."""
  landingUrl_starts_with: String

  """All values not starting with the given string."""
  landingUrl_not_starts_with: String

  """All values ending with the given string."""
  landingUrl_ends_with: String

  """All values not ending with the given string."""
  landingUrl_not_ends_with: String
  prospect: Boolean

  """All values that are not equal to given value."""
  prospect_not: Boolean
  baseLeadScore: Int

  """All values that are not equal to given value."""
  baseLeadScore_not: Int

  """All values that are contained in given list."""
  baseLeadScore_in: [Int!]

  """All values that are not contained in given list."""
  baseLeadScore_not_in: [Int!]

  """All values less than the given value."""
  baseLeadScore_lt: Int

  """All values less than or equal the given value."""
  baseLeadScore_lte: Int

  """All values greater than the given value."""
  baseLeadScore_gt: Int

  """All values greater than or equal the given value."""
  baseLeadScore_gte: Int
  leadScore: Int

  """All values that are not equal to given value."""
  leadScore_not: Int

  """All values that are contained in given list."""
  leadScore_in: [Int!]

  """All values that are not contained in given list."""
  leadScore_not_in: [Int!]

  """All values less than the given value."""
  leadScore_lt: Int

  """All values less than or equal the given value."""
  leadScore_lte: Int

  """All values greater than the given value."""
  leadScore_gt: Int

  """All values greater than or equal the given value."""
  leadScore_gte: Int
  euConsent: SubscriberEuConsent

  """All values that are not equal to given value."""
  euConsent_not: SubscriberEuConsent

  """All values that are contained in given list."""
  euConsent_in: [SubscriberEuConsent!]

  """All values that are not contained in given list."""
  euConsent_not_in: [SubscriberEuConsent!]
  euConsentMessage: String

  """All values that are not equal to given value."""
  euConsentMessage_not: String

  """All values that are contained in given list."""
  euConsentMessage_in: [String!]

  """All values that are not contained in given list."""
  euConsentMessage_not_in: [String!]

  """All values less than the given value."""
  euConsentMessage_lt: String

  """All values less than or equal the given value."""
  euConsentMessage_lte: String

  """All values greater than the given value."""
  euConsentMessage_gt: String

  """All values greater than or equal the given value."""
  euConsentMessage_gte: String

  """All values containing the given string."""
  euConsentMessage_contains: String

  """All values not containing the given string."""
  euConsentMessage_not_contains: String

  """All values starting with the given string."""
  euConsentMessage_starts_with: String

  """All values not starting with the given string."""
  euConsentMessage_not_starts_with: String

  """All values ending with the given string."""
  euConsentMessage_ends_with: String

  """All values not ending with the given string."""
  euConsentMessage_not_ends_with: String
}

input SubscriberWhereUniqueInput {
  id: ID
  email: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  member(where: MemberSubscriptionWhereInput): MemberSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  reaction(where: ReactionSubscriptionWhereInput): ReactionSubscriptionPayload
  milestone(where: MilestoneSubscriptionWhereInput): MilestoneSubscriptionPayload
  subscriber(where: SubscriberSubscriptionWhereInput): SubscriberSubscriptionPayload
  mail(where: MailSubscriptionWhereInput): MailSubscriptionPayload
}

type User implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole!
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member!]
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  votedProjects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  favoriteProjects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  votedPosts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  reactions(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction!]
  milestones(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Milestone!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  projects: ProjectCreateManyWithoutAuthorInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  posts: PostCreateManyWithoutAuthorInput
  votedPosts: PostCreateManyWithoutVotersInput
  comments: CommentCreateManyWithoutAuthorInput
  reactions: ReactionCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutFavoriteProjectsInput {
  create: [UserCreateWithoutFavoriteProjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutVotedPostsInput {
  create: [UserCreateWithoutVotedPostsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutVotedProjectsInput {
  create: [UserCreateWithoutVotedProjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMembersInput {
  create: UserCreateWithoutMembersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMilestonesInput {
  create: UserCreateWithoutMilestonesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReactionsInput {
  create: UserCreateWithoutReactionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  projects: ProjectCreateManyWithoutAuthorInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  posts: PostCreateManyWithoutAuthorInput
  votedPosts: PostCreateManyWithoutVotersInput
  reactions: ReactionCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

input UserCreateWithoutFavoriteProjectsInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  projects: ProjectCreateManyWithoutAuthorInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  posts: PostCreateManyWithoutAuthorInput
  votedPosts: PostCreateManyWithoutVotersInput
  comments: CommentCreateManyWithoutAuthorInput
  reactions: ReactionCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

input UserCreateWithoutMembersInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  projects: ProjectCreateManyWithoutAuthorInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  posts: PostCreateManyWithoutAuthorInput
  votedPosts: PostCreateManyWithoutVotersInput
  comments: CommentCreateManyWithoutAuthorInput
  reactions: ReactionCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

input UserCreateWithoutMilestonesInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  projects: ProjectCreateManyWithoutAuthorInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  posts: PostCreateManyWithoutAuthorInput
  votedPosts: PostCreateManyWithoutVotersInput
  comments: CommentCreateManyWithoutAuthorInput
  reactions: ReactionCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  projects: ProjectCreateManyWithoutAuthorInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  votedPosts: PostCreateManyWithoutVotersInput
  comments: CommentCreateManyWithoutAuthorInput
  reactions: ReactionCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

input UserCreateWithoutProjectsInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  posts: PostCreateManyWithoutAuthorInput
  votedPosts: PostCreateManyWithoutVotersInput
  comments: CommentCreateManyWithoutAuthorInput
  reactions: ReactionCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

input UserCreateWithoutReactionsInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  projects: ProjectCreateManyWithoutAuthorInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  posts: PostCreateManyWithoutAuthorInput
  votedPosts: PostCreateManyWithoutVotersInput
  comments: CommentCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

input UserCreateWithoutVotedPostsInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  projects: ProjectCreateManyWithoutAuthorInput
  votedProjects: ProjectCreateManyWithoutVotersInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  reactions: ReactionCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

input UserCreateWithoutVotedProjectsInput {
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberCreateManyWithoutUserInput
  projects: ProjectCreateManyWithoutAuthorInput
  favoriteProjects: ProjectCreateManyWithoutFavoritedUsersInput
  posts: PostCreateManyWithoutAuthorInput
  votedPosts: PostCreateManyWithoutVotersInput
  comments: CommentCreateManyWithoutAuthorInput
  reactions: ReactionCreateManyWithoutAuthorInput
  milestones: MilestoneCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  hasPassword_ASC
  hasPassword_DESC
  hasSocialLogin_ASC
  hasSocialLogin_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  picture_ASC
  picture_DESC
  twitter_ASC
  twitter_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  email: String!
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole!
}

enum UserRole {
  ROOT
  ADMIN
  USER
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  hasPassword: Boolean

  """All values that are not equal to given value."""
  hasPassword_not: Boolean
  hasSocialLogin: Boolean

  """All values that are not equal to given value."""
  hasSocialLogin_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  twitter: String

  """All values that are not equal to given value."""
  twitter_not: String

  """All values that are contained in given list."""
  twitter_in: [String!]

  """All values that are not contained in given list."""
  twitter_not_in: [String!]

  """All values less than the given value."""
  twitter_lt: String

  """All values less than or equal the given value."""
  twitter_lte: String

  """All values greater than the given value."""
  twitter_gt: String

  """All values greater than or equal the given value."""
  twitter_gte: String

  """All values containing the given string."""
  twitter_contains: String

  """All values not containing the given string."""
  twitter_not_contains: String

  """All values starting with the given string."""
  twitter_starts_with: String

  """All values not starting with the given string."""
  twitter_not_starts_with: String

  """All values ending with the given string."""
  twitter_ends_with: String

  """All values not ending with the given string."""
  twitter_not_ends_with: String
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  projects: ProjectUpdateManyWithoutAuthorInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  votedPosts: PostUpdateManyWithoutVotersInput
  comments: CommentUpdateManyWithoutAuthorInput
  reactions: ReactionUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
}

input UserUpdateManyMutationInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
}

input UserUpdateManyWithoutFavoriteProjectsInput {
  create: [UserCreateWithoutFavoriteProjectsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFavoriteProjectsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFavoriteProjectsInput!]
}

input UserUpdateManyWithoutVotedPostsInput {
  create: [UserCreateWithoutVotedPostsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutVotedPostsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutVotedPostsInput!]
}

input UserUpdateManyWithoutVotedProjectsInput {
  create: [UserCreateWithoutVotedProjectsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutVotedProjectsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutVotedProjectsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutMembersInput {
  create: UserCreateWithoutMembersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMembersDataInput
  upsert: UserUpsertWithoutMembersInput
}

input UserUpdateOneRequiredWithoutMilestonesInput {
  create: UserCreateWithoutMilestonesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMilestonesDataInput
  upsert: UserUpsertWithoutMilestonesInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateOneRequiredWithoutReactionsInput {
  create: UserCreateWithoutReactionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReactionsDataInput
  upsert: UserUpsertWithoutReactionsInput
}

input UserUpdateWithoutCommentsDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  projects: ProjectUpdateManyWithoutAuthorInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  votedPosts: PostUpdateManyWithoutVotersInput
  reactions: ReactionUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutFavoriteProjectsDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  projects: ProjectUpdateManyWithoutAuthorInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  posts: PostUpdateManyWithoutAuthorInput
  votedPosts: PostUpdateManyWithoutVotersInput
  comments: CommentUpdateManyWithoutAuthorInput
  reactions: ReactionUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutMembersDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  projects: ProjectUpdateManyWithoutAuthorInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  votedPosts: PostUpdateManyWithoutVotersInput
  comments: CommentUpdateManyWithoutAuthorInput
  reactions: ReactionUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutMilestonesDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  projects: ProjectUpdateManyWithoutAuthorInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  votedPosts: PostUpdateManyWithoutVotersInput
  comments: CommentUpdateManyWithoutAuthorInput
  reactions: ReactionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  projects: ProjectUpdateManyWithoutAuthorInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  votedPosts: PostUpdateManyWithoutVotersInput
  comments: CommentUpdateManyWithoutAuthorInput
  reactions: ReactionUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutProjectsDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  votedPosts: PostUpdateManyWithoutVotersInput
  comments: CommentUpdateManyWithoutAuthorInput
  reactions: ReactionUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutReactionsDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  projects: ProjectUpdateManyWithoutAuthorInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  votedPosts: PostUpdateManyWithoutVotersInput
  comments: CommentUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutVotedPostsDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  projects: ProjectUpdateManyWithoutAuthorInput
  votedProjects: ProjectUpdateManyWithoutVotersInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  reactions: ReactionUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutVotedProjectsDataInput {
  email: String
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String
  picture: String
  twitter: String
  role: UserRole
  members: MemberUpdateManyWithoutUserInput
  projects: ProjectUpdateManyWithoutAuthorInput
  favoriteProjects: ProjectUpdateManyWithoutFavoritedUsersInput
  posts: PostUpdateManyWithoutAuthorInput
  votedPosts: PostUpdateManyWithoutVotersInput
  comments: CommentUpdateManyWithoutAuthorInput
  reactions: ReactionUpdateManyWithoutAuthorInput
  milestones: MilestoneUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutFavoriteProjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFavoriteProjectsDataInput!
}

input UserUpdateWithWhereUniqueWithoutVotedPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutVotedPostsDataInput!
}

input UserUpdateWithWhereUniqueWithoutVotedProjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutVotedProjectsDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutMembersInput {
  update: UserUpdateWithoutMembersDataInput!
  create: UserCreateWithoutMembersInput!
}

input UserUpsertWithoutMilestonesInput {
  update: UserUpdateWithoutMilestonesDataInput!
  create: UserCreateWithoutMilestonesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserUpsertWithoutReactionsInput {
  update: UserUpdateWithoutReactionsDataInput!
  create: UserCreateWithoutReactionsInput!
}

input UserUpsertWithWhereUniqueWithoutFavoriteProjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFavoriteProjectsDataInput!
  create: UserCreateWithoutFavoriteProjectsInput!
}

input UserUpsertWithWhereUniqueWithoutVotedPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutVotedPostsDataInput!
  create: UserCreateWithoutVotedPostsInput!
}

input UserUpsertWithWhereUniqueWithoutVotedProjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutVotedProjectsDataInput!
  create: UserCreateWithoutVotedProjectsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  hasPassword: Boolean

  """All values that are not equal to given value."""
  hasPassword_not: Boolean
  hasSocialLogin: Boolean

  """All values that are not equal to given value."""
  hasSocialLogin_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  twitter: String

  """All values that are not equal to given value."""
  twitter_not: String

  """All values that are contained in given list."""
  twitter_in: [String!]

  """All values that are not contained in given list."""
  twitter_not_in: [String!]

  """All values less than the given value."""
  twitter_lt: String

  """All values less than or equal the given value."""
  twitter_lte: String

  """All values greater than the given value."""
  twitter_gt: String

  """All values greater than or equal the given value."""
  twitter_gte: String

  """All values containing the given string."""
  twitter_contains: String

  """All values not containing the given string."""
  twitter_not_contains: String

  """All values starting with the given string."""
  twitter_starts_with: String

  """All values not starting with the given string."""
  twitter_not_starts_with: String

  """All values ending with the given string."""
  twitter_ends_with: String

  """All values not ending with the given string."""
  twitter_not_ends_with: String
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  members_every: MemberWhereInput
  members_some: MemberWhereInput
  members_none: MemberWhereInput
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  votedProjects_every: ProjectWhereInput
  votedProjects_some: ProjectWhereInput
  votedProjects_none: ProjectWhereInput
  favoriteProjects_every: ProjectWhereInput
  favoriteProjects_some: ProjectWhereInput
  favoriteProjects_none: ProjectWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  votedPosts_every: PostWhereInput
  votedPosts_some: PostWhereInput
  votedPosts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  reactions_every: ReactionWhereInput
  reactions_some: ReactionWhereInput
  reactions_none: ReactionWhereInput
  milestones_every: MilestoneWhereInput
  milestones_some: MilestoneWhereInput
  milestones_none: MilestoneWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
