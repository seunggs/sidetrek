type User {
  id: ID! @unique
  updatedAt: DateTime!
  createdAt: DateTime!
  email: String! @unique
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String @unique
  picture: String
  twitter: String
  role: UserRole! @default(value: USER)
  members: [Member!] @relation(name: "MemberToUser", onDelete: CASCADE)
  projects: [Project!] @relation(name: "ProjectAuthorToUser", onDelete: CASCADE)
  votedProjects: [Project!] @relation(name: "ProjectVoterToUser", onDelete: CASCADE)
  favoriteProjects: [Project!] @relation(name: "ProjectFavoritedToUser", onDelete: CASCADE)
  posts: [Post!] @relation(name: "PostAuthorToUser", onDelete: CASCADE)
  votedPosts: [Post!] @relation(name: "PostVoterToUser", onDelete: CASCADE)
  comments: [Comment!] @relation(name: "CommentAuthorToUser", onDelete: CASCADE)
  reactions: [Reaction!] @relation(name: "ReactionAuthorToUser", onDelete: CASCADE)
  milestones: [Milestone] @relation(name: "MilestoneAuthorToUser", onDelete: CASCADE)
}

enum UserRole {
  ROOT,
  ADMIN,
  USER,
}

type File {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String! @unique
  project: Project @relation(name: "FileToProject", onDelete: SET_NULL)
}

type Project {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean! @default(value: false)
  featured: Boolean @default(value: false)
  name: String!
  url: String! @unique
  title: String!
  description: String
  body: Json
  author: User! @relation(name: "ProjectAuthorToUser", onDelete: SET_NULL)
  members: [Member!]! @relation(name: "MemberToProject", onDelete: CASCADE)
  voters: [User!] @relation(name: "ProjectVoterToUser", onDelete: SET_NULL)
  favoritedUsers: [User!] @relation(name: "ProjectFavoritedToUser", onDelete: SET_NULL)
  files: [File!] @relation(name: "FileToProject", onDelete: CASCADE)
  heroImageId: String
  milestones: [Milestone!] @relation(name: "MilestoneToProject", onDelete: CASCADE)
  posts: [Post!] @relation(name: "PostToProject", onDelete: CASCADE)
}

type Member {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User! @relation(name: "MemberToUser", onDelete: SET_NULL)
  role: MemberRole! @default(value: USER)
  project: Project! @relation(name: "MemberToProject", onDelete: SET_NULL)
  milestones: [Milestone!] @relation(name: "MilestonesToMember", onDelete: CASCADE) # member created milestones
}

enum MemberRole {
  ROOT,
  ADMIN,
  MODERATOR,
  USER,
}

type Post {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  body: String!
  published: Boolean! @default(value: false)
  author: User! @relation(name: "PostAuthorToUser", onDelete: SET_NULL)
  comments: [Comment!] @relation(name: "PostToComment", onDelete: CASCADE)
  voters: [User!] @relation(name: "PostVoterToUser", onDelete: SET_NULL)
  project: Project @relation(name: "PostToProject", onDelete: SET_NULL)
}

type Comment {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User! @relation(name: "CommentAuthorToUser", onDelete: SET_NULL)
  reactions: [Reaction!] @relation(name: "CommentToReaction", onDelete: CASCADE)
  body: String!
  post: Post @relation(name: "PostToComment", onDelete: SET_NULL)
  parentComment: Comment @relation(name: "ParentToChildComment", onDelete: SET_NULL)
  childComments: [Comment!] @relation(name: "ParentToChildComment", onDelete: CASCADE)
}

type Reaction {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User! @relation(name: "ReactionAuthorToUser", onDelete: SET_NULL)
  emoji: String!
  comment: Comment @relation(name: "CommentToReaction", onDelete: SET_NULL)
  milestone: Milestone @relation(name: "MilestoneToReaction", onDelete: SET_NULL)
}

type Milestone {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  author: User! @relation(name: "MilestoneAuthorToUser", onDelete: SET_NULL)
  deadline: DateTime
  project: Project! @relation(name: "MilestoneToProject", onDelete: SET_NULL)
  reactions: [Reaction!] @relation(name: "MilestoneToReaction", onDelete: CASCADE)
  member: Member! @relation(name: "MilestonesToMember", onDelete: SET_NULL)
  achieved: Boolean @default(value: false)
  order: Int
}

# type Tag {
#   id: ID! @unique
#   createdAt: DateTime!
#   updatedAt: DateTime!
#   text: String!
# }

# Mapping Drip subscriber object
type Subscriber {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  dripId: String
  email: String! @unique
  status: SubscriberStatus
  visitorUuid: String
  newEmail: String
  userId: String
  timeZone: String # in Olson format
  utcOffset: String # in minutes
  lifetimeValue: Int
  ipAddress: String
  userAgent: String
  originalReferrer: String
  landingUrl: String
  customFields: Json
  tags: [String!]
  removeTags: [String!]
  prospect: Boolean @default(value: true)
  baseLeadScore: Int
  leadScore: Int
  euConsent: SubscriberEuConsent
  euConsentMessage: String
}

enum SubscriberStatus {
  ACTIVE,
  UNSUBSCRIBED
}

enum SubscriberEuConsent {
  GRANTED,
  DENIED,
  UNKNOWN
}